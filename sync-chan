#!/bin/bash
#
#     █████████   █████  █████ ███████████    █████  █████               █████
#    ███░░░░░███ ░░███  ░░███ ░░███░░░░░███  ░░███  ░░███               ░░███
#   ░███    ░███  ░███   ░███  ░███    ░███   ░███   ░███  ████████   ███████
#   ░███████████  ░███   ░███  ░██████████    ░███   ░███ ░░███░░███ ███░░███
#   ░███░░░░░███  ░███   ░███  ░███░░░░░███   ░███   ░███  ░███ ░███░███ ░███
#   ░███    ░███  ░███   ░███  ░███    ░███   ░███   ░███  ░███ ░███░███ ░███
#   █████   █████ ░░████████   █████   █████  ░░████████   ░███████ ░░████████
#  ░░░░░   ░░░░░   ░░░░░░░░   ░░░░░   ░░░░░    ░░░░░░░░    ░███░░░   ░░░░░░░░
#                                                          ░███
#                                                          █████
#                                                         ░░░░░
# 
# The folder structure should look something like this:
# ➜ tree                                                       
# ├── beatmapexporter-bin
# │   ├── BeatmapExporter
# │   ├── beatmapexporter.desktop
# │   ├── PKGBUILD
# │   ├── pkg
# │   │   └── ...
# │   └── src
# │       └── ...
# ├── beatmapexporter-cli-bin
# │   ├── BeatmapExporterCLI
# │   ├── PKGBUILD
# │   ├── pkg
# │   │   └── ...
# │   └── src
# │       └── ...
# ├── ...
# └── aur-update
#     ├── LICENSE
#     └── update
# 
# How does it work?
# - Finding how to download binary
#       It finds the url of the binary (for downloading it) with this regex:
#     *"https://github.com/$repo/releases/download/"*
#     (searches for the line that has the github download url)
# - Getting sha256 sum of downloaded binaries
#       it does so by finding any text that is in `source=(...)` section
#     has `"` and `::`, so getting the binary name from the source section.
#     so make sure to name the downloaded binary:
#     ---- WRONG
#     > source=(
#     >     "https://github.com/REPO/releases/download/v${pkgver}/BINARYNAME"
#     > )
#     ---- correct
#     > source=(
#     >     "CustomBinaryName::https://github.com/REPO/releases/download/v${pkgver}/BINARYNAME"
#     > )
# - Replacing old hash with the hash of downloaded binaries
#       it finds how offseted the binary line in `source=(...)` section is,
#     finds the `sha256sums=(` line and apply that offset to line number
#     of founded line.
#       so if `sha256sums=(` is in line 17, and the binary url is in 2nd
#     line in source=() section, then the location of the binary hash
#     should be in line 19.
#       so keep in mind that there shouldn't be any newline between hashes in
#     `sha256sums=(...)` section.
#

set -euo pipefail

sect() { echo -e "\n\e[1;32m==>\e[0m \e[1m$1\e[0m"; }
eror() { echo -e "\e[1;31m!!>\e[0m \e[1m$1\e[0m"; }
warn() { echo -e "\e[1;33m-->\e[0m \e[1m$1\e[0m"; }
info() { echo -e "\e[1;35m ->\e[0m \e[1m$1\e[0m"; }

sect "Adding ssh key..."
eval "$(ssh-agent -s)"
ssh-add "$HOME/.ssh/aur" # prompt for ssh keys with password

cd ..

sect "hii!"

# Iterate in folders that has PKGBUILD and is not `aur-update` folder
find . -type f -name "PKGBUILD" | while read -r pkgbuild; do
    if [ "$dir" == "aur-update" ]; then
        continue
    fi

    # Extract the repo from PKGBUILD
    url_line=$(grep '^url=' "$pkgbuild")
    repo=$(echo "$url_line" | grep -oP 'github\.com/\K[^/]+/[^/.]+')

    # Fetch the latest version number from GitHub API
    sect "Fetch the latest version number from $repo..."
    latest_release=$(curl -s "https://api.github.com/repos/$repo/releases/latest")
    pkgver=$(echo "$latest_release" | grep -oP '"tag_name": "\K(.*)(?=")')
    if [[ -z "$pkgver" ]]; then
        eror "Failed to get latest version for $dir ($repo)"
        continue
    fi
    info "$pkgver"

    # Extract info about source section in PKGBUILD
    mapfile -t sources < <(awk '/^source=\(/,/^\)/' "$pkgbuild" | grep '"')
    if [[ ${#sources[@]} -eq 0 ]]; then
        eror "No sources found in $pkgbuild"
        continue
    fi
    
    bin_index=-1
    bin_name=""
    for i in "${!sources[@]}"; do
        if [[ ${sources[$i]} == *"https://github.com/$repo/releases/download/"* ]]; then
            bin_index=$i
            pattern="\"([^\"]+)::([^\"]+)\""
            if [[ ${sources[$i]} =~ $pattern ]]; then
                bin_name="${BASH_REMATCH[1]}"
                bin_url="${BASH_REMATCH[2]}"
            fi
            break
        fi
    done


    dir=$(dirname "$pkgbuild")
    sect "Processing $dir..."

  #
  #   ███████████  ███  ████
  #  ░░███░░░░░░█ ░░░  ░░███
  #   ░███   █ ░  ████  ░███   ██████   █████
  #   ░███████   ░░███  ░███  ███░░███ ███░░
  #   ░███░░░█    ░███  ░███ ░███████ ░░█████
  #   ░███  ░     ░███  ░███ ░███░░░   ░░░░███
  #   █████       █████ █████░░██████  ██████
  #  ░░░░░       ░░░░░ ░░░░░  ░░░░░░  ░░░░░░
  #
  # Downloads files from releases

    sect "Downloading binaries from Github releases..."
    curl -L "${bin_url}" -o "${dir}"
    info "Files downloaded."

#
#   █████   █████                   █████
#  ░░███   ░░███                   ░░███
#   ░███    ░███   ██████    █████  ░███████
#   ░███████████  ░░░░░███  ███░░   ░███░░███
#   ░███░░░░░███   ███████ ░░█████  ░███ ░███
#   ░███    ░███  ███░░███  ░░░░███ ░███ ░███
#   █████   █████░░████████ ██████  ████ █████
#  ░░░░░   ░░░░░  ░░░░░░░░ ░░░░░░  ░░░░ ░░░░░
#
# Calculates hash and puts it in PKGBUILD

    if [[ $bin_index -eq -1 || -z "$bin_name" ]]; then
        eror "No binary source found in $pkgbuild"
        continue
    fi

    info "Found binary source: $bin_name (index $bin_index)"

    # Check for matching file
    file_path="$dir/$bin_name"
    if [[ ! -f "$file_path" ]]; then
        eror "File not found: $file_path"
        continue
    fi

    sha256=$(sha256sum "$file_path" | awk '{print $1}')
    info "Computed sha256sum: $sha256"

    # --- Locate the line number of sha256sums=( ---
    sha_line=$(grep -n '^sha256sums=(' "$pkgbuild" | cut -d: -f1)
    if [[ -z "$sha_line" ]]; then
        eror "sha256sums=() not found in $pkgbuild"
        continue
    fi

    # The line to replace is: sha_line + bin_index + 1 (because arrays are zero-indexed)
    target_line=$((sha_line + bin_index + 1))
    info "Replacing line $target_line with computed hash"

    # Escape forward slashes for sed
    esc_hash=$(printf '%s\n' "$sha256" | sed 's/[\/&]/\\&/g')

    # Replace the line in-place
    sed -i "${target_line}s/.*/    \"$esc_hash\"/" "$pkgbuild"

    info "Updated sha256sums for $pkgbuild"
    
#
#   █████   █████
#  ░░███   ░░███
#   ░███    ░███   ██████  ████████
#   ░███    ░███  ███░░███░░███░░███
#   ░░███   ███  ░███████  ░███ ░░░
#    ░░░█████░   ░███░░░   ░███
#      ░░███     ░░██████  █████
#       ░░░       ░░░░░░  ░░░░░
#
# Updates the version of software

    sect "Updating version number..."
    sed -i -E "s/^pkgver=.*/pkgver=${pkgver}/" "$pkgbuild"
    # Print updated line for confirmation
    line=$(grep "^pkgver=" "$pkgbuild")
    info "$line"

#
#    █████████  █████ ██████   █████ ███████████    ███████
#   ███░░░░░███░░███ ░░██████ ░░███ ░░███░░░░░░█  ███░░░░░███
#  ░███    ░░░  ░███  ░███░███ ░███  ░███   █ ░  ███     ░░███
#  ░░█████████  ░███  ░███░░███░███  ░███████   ░███      ░███
#   ░░░░░░░░███ ░███  ░███ ░░██████  ░███░░░█   ░███      ░███
#   ███    ░███ ░███  ░███  ░░█████  ░███  ░    ░░███     ███
#  ░░█████████  █████ █████  ░░█████ █████       ░░░███████░
#   ░░░░░░░░░  ░░░░░ ░░░░░    ░░░░░ ░░░░░          ░░░░░░░
#
# Updates SRCINFO to update SRCINFO

    sect Updating srcinfo...
    makepkg --printsrcinfo > .SRCINFO

#   ███████████                     █████     
#  ░░███░░░░░███                   ░░███      
#   ░███    ░███ █████ ████  █████  ░███████  
#   ░██████████ ░░███ ░███  ███░░   ░███░░███ 
#   ░███░░░░░░   ░███ ░███ ░░█████  ░███ ░███ 
#   ░███         ░███ ░███  ░░░░███ ░███ ░███ 
#   █████        ░░████████ ██████  ████ █████
#  ░░░░░          ░░░░░░░░ ░░░░░░  ░░░░ ░░░░░
#
# Pushes the changes to aur

    sect "Pushing..."
    cd "${dir}"
    git add .
    git commit -m 'Update to latest version :3'
    git push
    cd ..

done
